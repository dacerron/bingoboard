{"version":3,"sources":["logo.svg","Components/BoardDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["BoardDisplay","activities","map","e","App","useState","activityName","setActivityName","renderedActivities","setRenderedActivities","className","types","onChange","target","value","updateActivityName","placeholder","type","onClick","fetch","mode","headers","then","response","json","data","console","catch","err","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAAe,I,YCMAA,MANf,YAAoC,IAAbC,EAAY,EAAZA,WACnB,OAAQ,mCACPA,EAAWC,KAAI,SAACC,UC0DNC,MAtDf,WAAgB,IAAD,EAE2BC,mBAAS,IAFpC,mBAENC,EAFM,KAEQC,EAFR,OAGuCF,mBAAS,IAHhD,mBAGNG,EAHM,KAGcC,EAHd,KA6Cb,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,MAAM,OAAOC,SAAU,SAACT,IAvBR,SAASA,GAClCI,EAAgBJ,EAAEU,OAAOC,OAsBgBC,CAAmBZ,IAAKa,YAAa,2BAAkC,wBAAQC,KAAK,SAASC,QAAS,WAxC/IC,MAAM,0CAA4Cb,EAAc,CAC9Dc,KAAM,UACNC,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLC,QAAQD,MAETE,OAAM,SAACC,GACNF,QAAQG,IAAID,OA2BkG,kBAC9G,wBAAQX,KAAK,SAASC,QAAS,WAnBjCC,MAAM,sCAAuC,CAC3CC,KAAM,SAEPE,MAAK,SAACC,GAEL,OADAG,QAAQG,IAAIN,GACLA,EAASC,UAEjBF,MAAK,SAACG,GACLC,QAAQG,IAAIJ,GACZhB,EAAsBgB,MAEvBE,OAAM,SAACC,GACNF,QAAQG,IAAID,OAOZ,2BACA,cAAC,EAAD,CAAc3B,WAAYO,QC3CjBsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b4a84660.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","function BoardDisplay({activities}){\r\n    return (<>\r\n    {activities.map((e) => { <p>{e}</p>})}\r\n    </>)\r\n}\r\n\r\nexport default BoardDisplay","import { useState } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport BoardDisplay from './Components/BoardDisplay.jsx'\n\nfunction App() {\n\n  const [activityName, setActivityName] = useState(\"\")\n  const [renderedActivities, setRenderedActivities] = useState([])\n\n  const addActivityHandler = function() {\n\n    fetch(\"http://127.0.0.1:8000/newActivity?desc=\" + activityName, {\n      mode: 'no-cors',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((data) => {\n      console(data)\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const updateActivityName = function(e) {\n    setActivityName(e.target.value)\n  }\n\n  const fetchActivities = function(e) {\n    fetch(\"http://127.0.0.1:8000/generateBoard\", {\n      mode: 'cors'\n    })\n    .then((response) => {\n      console.log(response)\n      return response.json()\n    })\n    .then((data) => {\n      console.log(data)\n      setRenderedActivities(data)\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <input types=\"text\" onChange={(e) => { updateActivityName(e)}} placeholder={\"describe activity here\"}></input><button type=\"button\" onClick={() => { addActivityHandler()}}>save</button>\n      <button type=\"button\" onClick={() => {fetchActivities()}}>generateBoard</button>\n      <BoardDisplay activities={renderedActivities}></BoardDisplay>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}