{"version":3,"sources":["logo.svg","Components/BoardDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["Item","styled","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","height","width","BoardDisplay","activities","className","Box","sx","flexGrow","Grid","container","map","e","item","xs","sm","App","useState","activityName","setActivityName","renderedActivities","setRenderedActivities","types","onChange","target","value","updateActivityName","placeholder","type","onClick","fetch","method","then","response","console","log","catch","err","mode","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAe,I,4DCMTA,EAAOC,YAAOC,IAAPD,EAAc,gBAAGE,EAAH,EAAGA,MAAH,mBAAC,eACrBA,EAAMC,WAAWC,OADG,IAEvBC,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACXC,MAAON,EAAMO,QAAQC,KAAKC,UAC1BC,OAAQ,IAAKC,MAAO,SASTC,MANf,YAAuC,IAAfC,EAAc,EAAdA,WACpB,OAAQ,qBAAKC,UAAW,iBAAhB,SAAkC,cAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,GAArB,SAAyB,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACf,QAAS,EAAzB,SAC9DS,EAAWO,KAAI,SAACC,GAAQ,OAAO,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGV,UAAW,WAApC,SAAgD,cAACjB,EAAD,UAAOwB,gBCsChFI,MAhDf,WAAgB,IAAD,EAE2BC,mBAAS,IAFpC,mBAENC,EAFM,KAEQC,EAFR,OAGuCF,mBAAS,IAHhD,mBAGNG,EAHM,KAGcC,EAHd,KAuCb,OACE,sBAAKhB,UAAU,MAAf,UACE,uBAAOiB,MAAM,OAAOC,SAAU,SAACX,IAvBR,SAASA,GAClCO,EAAgBP,EAAEY,OAAOC,OAsBgBC,CAAmBd,IAAKe,YAAa,2BAAkC,wBAAQC,KAAK,SAASC,QAAS,WAlC/IC,MAAM,wCAAwCZ,EAAa,CACzDa,OAAQ,QAETC,MAAK,SAACC,GACLC,QAAQC,IAAIF,MAEbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,OA2BkG,kBAC9G,wBAAQT,KAAK,SAASC,QAAS,WAnBjCC,MAAM,yCAA0C,CAC9CQ,KAAM,SAEPN,MAAK,SAACC,GAEL,OADAC,QAAQC,IAAIF,GACLA,EAASM,UAEjBP,MAAK,SAACQ,GACLN,QAAQC,IAAIK,GACZnB,EAAsBmB,MAEvBJ,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAOZ,2BACA,cAAC,EAAD,CAAcjC,WAAYgB,QCrCjBqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c54ee09c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Grid from '@mui/material/Grid'\r\nimport { styled } from '@mui/material/styles'\r\nimport Paper from '@mui/material/Paper'\r\nimport Box from '@mui/material/Box'\r\nimport './board.css'\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    height: 140, width: 100\r\n}));\r\n\r\nfunction BoardDisplay({ activities }) {\r\n    return (<div className={\"boardContainer\"}><Box sx={{ flexGrow: 1}}><Grid container spacing={2}>\r\n        {activities.map((e) => { return <Grid item xs={4} sm={3} className={\"gridCell\"}><Item>{e}</Item></Grid> })}\r\n    </Grid></Box></div>)\r\n}\r\n\r\nexport default BoardDisplay","import { useState } from 'react'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport BoardDisplay from './Components/BoardDisplay.jsx'\r\n\r\nfunction App() {\r\n\r\n  const [activityName, setActivityName] = useState(\"\")\r\n  const [renderedActivities, setRenderedActivities] = useState([])\r\n\r\n  const addActivityHandler = function() {\r\n\r\n    fetch(\"http://192.168.0.17:8080/newActivity/\"+activityName,{\r\n      method: \"GET\",\r\n    })\r\n    .then((response) => {\r\n      console.log(response)\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  const updateActivityName = function(e) {\r\n    setActivityName(e.target.value)\r\n  }\r\n\r\n  const fetchActivities = function(e) {\r\n    fetch(\"http://192.168.0.17:8080/generateBoard\", {\r\n      mode: 'cors'\r\n    })\r\n    .then((response) => {\r\n      console.log(response)\r\n      return response.json()\r\n    })\r\n    .then((data) => {\r\n      console.log(data)\r\n      setRenderedActivities(data)\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input types=\"text\" onChange={(e) => { updateActivityName(e)}} placeholder={\"describe activity here\"}></input><button type=\"button\" onClick={() => { addActivityHandler()}}>save</button>\r\n      <button type=\"button\" onClick={() => {fetchActivities()}}>generateBoard</button>\r\n      <BoardDisplay activities={renderedActivities}></BoardDisplay>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}